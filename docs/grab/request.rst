.. _grab/request: 

Создание и настройка сетевого запроса
=====================================

Сетевой запрос выполняется путём настройки Grab-объекта и последущим вызовом одного из методов: request, go или submit. Методы `request` или `go` генерируют запрос с ранее заданными параметрами, а метод `submit` отправляет ранее заполненную форму (см. работу с формами).

Единственный обязательный параметр запроса - это `url` - адрес запрашиваемого документа::

    g.setup(url='http://sony.com')
    g.request()

Метод `go` аналогичен методу `request` за исключением того, что он требует первым параметром
адрес документа::

    g.go('http://sony.com')

Рассмотрим различные группы настроек сетевого запроса.


Тип HTTP-запроса
----------------

По-умолчанию, создаётся GET-запрос. Если вы указываете POST-данные, то тип запроса автоматически изменяется на POST::

    g.setup(post={'user': 'root'})
    g.request() # будет сгенерирован POST-запрос

Если вам нужен более экзотический типа запроса, вы можете указать его опцией `method`::

    g.setup(method='PUT')


POST-запрос
-----------

Рассмотрим более подробно создание POST-запросов. По-умолчанию, когда вы задаёте `post` опцию, тип запроса меняется на POST, а `Content-Type` становится равен `application/x-www-form-urlencoded`. Опция `post` принимает данные в различных форматах. Если вы передаёте `dict` или список пар значений, то данные будут преобразованы в "key1=value1&key2=value2..." строку. Если же вы передаёте строку, то она будет отпралена в неизменном виде::

    g.setup(post={'user': 'root', 'pwd': '123'})
    g.setup(post=[('user', 'root'), ('pwd', '123')])
    g.setup(post='user=root&pwd=123')

Чтобы отправить POST запрос с `Content-Type` равным `multipart/form-data`, используйте опцию `post_multipart` вместо `post`.

Для отправки файлов Grab предоставляет специальный класс `UploadFile`. Пример использования::

    from grab import Grab, UploadFile
    g = Grab()
    g.go('http://domain.com/tube/upload')
    g.set_input('file', UploadFile('/tmp/porn.avi')
    g.submit()


.. _request_headers:

Изменение HTTP-заголовков
-------------------------

Для управления отсылаемыми HTTP-заголовками используйте опцию :ref:`option_headers`, её значением должен быть словарь. По-умолчанию, Grab сам настраивает несколько HTTP-заголовков: Accept, Accept-Language, Accept-Charset, Keep-Alive и User-Agent. Их вы также можете переопределить опцией ``headers``.

.. _request_user_agent:

Настройка User-Agent заголовка
------------------------------

Для изменения `User-Agent` заголовка вы можете использовать как опцию :ref:`option_headers`, так и отдельную опцию :ref:`option_user_agent`. По-умолчанию, Grab генерирует значение для `User-Agent` заголовка на основе случайного выбора из множества значений `User-Agent` реальных браузеров. Вы также можете передать своё множество значений `User-Agent` с помощью опции :ref:`option_user_agent_file`, значением которой должен быть путь к текстовому файлу с `User-Agent` строками.

Настройка Referer заголовка
---------------------------

Для изменения `Referer` заголовка вы можете использовать как опцию :ref:`option_headers`, так и отдельную опцию :ref:`option_referer`. Для того, чтобы для заголовка `Referer` использовался адрес прыдыдущего запрошенного документа, включите опцию :ref:`option_reuse_referer`. Кстати, по-умолчанию, она и так включена.

Работа с кукисами
-----------------

Для того, чтобы отправить в запросе кукисы, используйте опцию :ref:`option_cookies`. Для того, чтобы кукисы, полученные в ответе сервера, автоматически подставлялись в следующие запросы, используйте опцию :ref:`option_reuse_cookies`. По-умолчанию, она включена.  

Если включены обе опции :ref:`option_cookies` и :ref:`option_reuse_cookies`, то запомненные кукисы будут объединятьс с теми, что указаны в :ref:`option_cookies`.
