.. _grab/request: 

Создание и настройка сетевого запроса
=====================================

Сетевой запрос выполняется путём настройки Grab-объекта и последущим вызовом одного из методов: request, go или submit. Методы `request` или `go` генерируют запрос с ранее заданными параметрами, а метод `submit` отправляет ранее заполненную форму (см. работу с формами).

Единственный обязательный параметр запроса - это `url` - адрес запрашиваемого документа::

    g.setup(url='http://sony.com')
    g.request()

Метод `go` аналогичен методу `request` за исключением того, что он требует первым параметром
адрес документа::

    g.go('http://sony.com')

Рассмотрим различные группы настроек сетевого запроса.


Тип HTTP-запроса
----------------

По-умолчанию, создаётся GET-запрос. Если вы указываете POST-данные, то тип запроса автоматически изменяется на POST::

    g.setup(post={'user': 'root'})
    g.request() # будет сгенерирован POST-запрос

Если вам нужен более экзотический типа запроса, вы можете указать его опцией `method`::

    g.setup(method='PUT')


POST-запрос
-----------

Рассмотрим более подробно создание POST-запросов. По-умолчанию, когда вы задаёте `post` опцию, тип запроса меняется на POST, а `Content-Type` становится равен `application/x-www-form-urlencoded`. Опция `post` принимает данные в различных форматах. Если вы передаёте `dict` или список пар значений, то данные будут преобразованы в "key1=value1&key2=value2..." строку. Если же вы передаёте строку, то она будет отпралена в неизменном виде::

    g.setup(post={'user': 'root', 'pwd': '123'})
    g.setup(post=[('user', 'root'), ('pwd', '123')])
    g.setup(post='user=root&pwd=123')

Чтобы отправить POST запрос с `Content-Type` равным `multipart/form-data`, используйте опцию `post_multipart` вместо `post`.

Для отправки файлов Grab предоставляет специальный класс `UploadFile`. Пример использования::

    from grab import Grab, UploadFile
    g = Grab()
    g.go('http://domain.com/tube/upload')
    g.set_input('file', UploadFile('/tmp/porn.avi')
    g.submit()


Работа с прокси-серверами
-------------------------

Для использования проки-сервера вам нужно задать две опции: `proxy` и `proxy_type`. Опция `proxy` принимает значения в виде строки `server:port`. Опция `proxy_type` допускает значения трёх типов: `http`, `socks4` и `socks5`. Пример::

    g.setup(proxy='gate.somhost.com:444', proxy_type='http')
    
Если прокси-сервер требует авторизации, испоьзуйте опцию `proxy_userpwd`, которая принимает значение в виде строки `username:password`.
